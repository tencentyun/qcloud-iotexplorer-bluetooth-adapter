export const DEVICE_HAS_BINDED = 'DEVICE_HAS_BINDED';
export const DEVICE_NOT_BIND = 'DEVICE_NOT_BIND';
export const DEVICE_WAITING_BIND = 'DEVICE_WAITING_BIND';
export const DEVICE_HAS_CONNECTED = 'DEVICE_HAS_CONNECTED';

export const DEVICE_STATE_MAP = {
  0: DEVICE_NOT_BIND,
  1: DEVICE_WAITING_BIND,
  2: DEVICE_HAS_BINDED,
  3: DEVICE_HAS_CONNECTED,
};


export const DEVICE_INFO_WRITE_ID = '0000FFE1-65D0-4E20-B56A-E493541BA4E2';
export const DEVICE_DATA_WRITE_ID = '0000FFE2-65D0-4E20-B56A-E493541BA4E2';
export const DEVICE_EVENT_WRITE_ID = '0000FFE3-65D0-4E20-B56A-E493541BA4E2';
export const LL_OTA_WRITE_ID = '0000FFE4-65D0-4E20-B56A-E493541BA4E2';

export const PROPERTY_REPORT = 'PROPERTY_REPORT';
export const CONTROL_DEVICE = 'CONTROL_DEVICE';
export const CONTROL_ACTION = 'CONTROL_ACTION';
export const REPORT_RESULT = 'REPORT_RESULT';
export const CONTROL_REPLY = 'CONTROL_REPLY';
export const GET_STATUS = 'GET_STATUS';
export const EVENT_REPORT = 'EVENT_REPORT';
export const EVENT_REPLY = 'EVENT_REPLY';
export const ACTION_REPLY = 'ACTION_REPLY';
export const UPDATE_REPLY = 'UPDATE_REPLY';
export const UPDATE_DATA_REPLY = 'UPDATE_DATA_REPLY';
export const UPDATE_DATA_CHECK_REPLY = 'UPDATE_DATA_CHECK_REPLY';
export const UPDATE_REPLY_INVALID = 'UPDATE_REPLY_INVALID';

export const BIND_AUTH = 'BIND_AUTH';
export const SET_MTU_BEFORE_CONNECT = 'SET_MTU_BEFORE_CONNECT';
export const BIND_AUTH_DETAIL = 'BIND_AUTH_DETAIL';
export const BIND_AUTH_SUCCESS = 'BIND_AUTH_SUCCESS';
export const BIND_AUTH_FAIL = 'BIND_AUTH_FAIL';
export const CONNECT_AUTH = 'CONNECT_AUTH';
export const DEVICE_INFO = 'DEVICE_INFO';
export const ANDROID_SET_MTU = 'ANDROID_SET_MTU';
export const CONNECT_RESULT_WRITE_SUCCESS = 'CONNECT_RESULT_WRITE_SUCCESS';
export const CONNECT_RESULT_WRITE_FAIL = 'CONNECT_RESULT_WRITE_FAIL';
export const UNBIND_RESULT_AUTH_SUCCESS = 'UNBIND_RESULT_AUTH_SUCCESS';
export const UNBIND_RESULT_AUTH_FAIL = 'UNBIND_RESULT_AUTH_FAIL';
export const UNBIND_AUTH = 'UNBIND_AUTH';
export const TIME_SYNC = 'TIME_SYNC';
export const CONTROL_ACTION_SUCCESS = 'CONTROL_ACTION_SUCCESS';
export const WRITE_MTU_RESULT = 'WRITE_MTU_RESULT';
export const MTU_MODULE_CALLBACK = 'MTU_MODULE_CALLBACK';

// llsync blecombo协议
// writeIDs
export const GET_DEVICE_INFO = 'GET_DEVICE_INFO';
export const SET_WIFI_MODE = 'SET_WIFI_MODE';
export const SET_WIFI_INFO = 'SET_WIFI_INFO';
export const SET_WIFI_CONNECT = 'SET_WIFI_CONNECT';
export const SET_WIFI_TOKEN = 'SET_WIFI_TOKEN';
export const GET_DEV_LOG = 'GET_DEV_LOG';
// NOTIFY
export const SET_WIFI_MODE_RESULT = 'SET_WIFI_MODE_RESULT';
export const SET_WIFI_INFO_RESULT = 'SET_WIFI_INFO_RESULT';
export const SET_WIFI_CONNECT_RESULT = 'SET_WIFI_CONNECT_RESULT';
export const SET_WIFI_TOKEN_RESULT = 'SET_WIFI_TOKEN_RESULT';
export const GET_DEV_LOG_INFO = 'GET_DEV_LOG_INFO';
// others
export const STA_WIFI_MODE = 'STA_WIFI_MODE';
export const NULL_WIFI_MODE = 'NULL_WIFI_MODE';


// 用户确认过程的变量
export const WAIT_USER_CHECK_TIMEOUT = 'WAIT_USER_CHECK_TIMEOUT';
export const GET_USER_CHECK_APPROVE = 'GET_USER_CHECK_APPROVE';
export const GET_USER_CHECK_REJECT = 'GET_USER_CHECK_REJECT';
export const USER_CHECK_TIMEOUT = 'USER_CHECK_TIMEOUT';
export const USER_CHECK_TIMEOUT_CALLBACK = 'USER_CHECK_TIMEOUT_CALLBACK';
export const GET_USER_CHECK_TIMEOUT_TIMEOUT = 'GET_USER_CHECK_TIMEOUT_TIMEOUT';
export const GET_USER_CHECK_TIMEOUT_ERROR = 'GET_USER_CHECK_TIMEOUT_ERROR';
export const GET_USER_CHECK_TIMEOUT_SUCCESS = 'GET_USER_CHECK_TIMEOUT_SUCCESS';
export const WRITE_USER_CHECK_TIMEOUT = 1;
export const WRITE_USER_CHECK_CANCEL = 0;

export const UNBIND_REQUEST = 'UnbindRequest';
export const UNBIND_RESPONSE = 'UnbindResponse';

// 作为key的话，变成十进制好处理
export const INDICATE_TYPE_MAP = {
  0: PROPERTY_REPORT,
  1: CONTROL_REPLY,
  2: GET_STATUS,
  3: EVENT_REPORT,
  4: ACTION_REPLY,
  5: BIND_AUTH,
  6: CONNECT_AUTH,
  7: UNBIND_AUTH,
  8: DEVICE_INFO,
  9: UPDATE_REPLY,
  10: UPDATE_DATA_REPLY,
  11: UPDATE_DATA_CHECK_REPLY,
  12: MTU_MODULE_CALLBACK,
  13: USER_CHECK_TIMEOUT_CALLBACK,
  // llsync ble
  224: SET_WIFI_MODE_RESULT,
  225: SET_WIFI_INFO_RESULT,
  226: SET_WIFI_CONNECT_RESULT,
  227: SET_WIFI_TOKEN_RESULT,
  228: GET_DEV_LOG_INFO,
};

// 十六进制
export const DEVICE_INFO_WRITE_PREFIX = {
  [TIME_SYNC]: '00',
  [CONNECT_AUTH]: '01',
  [BIND_AUTH_SUCCESS]: '02',
  [BIND_AUTH_FAIL]: '03',
  [UNBIND_AUTH]: '04',
  [CONNECT_RESULT_WRITE_SUCCESS]: '05',
  [CONNECT_RESULT_WRITE_FAIL]: '06',
  [UNBIND_RESULT_AUTH_SUCCESS]: '07',
  [UNBIND_RESULT_AUTH_FAIL]: '08',
  [WRITE_MTU_RESULT]: '09',
  [USER_CHECK_TIMEOUT]: '0A',
  // ble combo
  [GET_DEVICE_INFO]: 'E0',
  [SET_WIFI_MODE]: 'E1',
  [SET_WIFI_INFO]: 'E2',
  [SET_WIFI_CONNECT]: 'E3',
  [SET_WIFI_TOKEN]: 'E4',
  [GET_DEV_LOG]: 'E5',
};

export const DEVICE_DATA_WRITE_HEAD = {
  [CONTROL_DEVICE]: '000',
  [REPORT_RESULT]: '001',
  [GET_STATUS]: '001',
  [EVENT_REPLY]: '011',
  [CONTROL_ACTION]: '100',
};


export const DEVICE_DATA_WRITE_SUFFIX = {
  [CONTROL_DEVICE]: '00000',
  [REPORT_RESULT]: '00000',
  [GET_STATUS]: '00010',
};

// blecombo的一些type
export const WIFI_MODE_MAP = {
  [NULL_WIFI_MODE]: 0x00,
  [STA_WIFI_MODE]: 0x01,
};
export const WIFI_LOG_TYPE_MAP = {
  ERROR_LOG: 0x00,
  NORMAL_LOG: 0x01,
};


export const ACTION_DESC = {
  [CONTROL_DEVICE]: '远程控制',
  [REPORT_RESULT]: '属性上报结果通知',
  [GET_STATUS]: '写入设备最新状态',
  [EVENT_REPLY]: '处理设备端事件上报',
  [CONTROL_ACTION]: '对设备进行行为调用',
  [CONTROL_ACTION_SUCCESS]: '对设备进行行为调用成功',
  [TIME_SYNC]: '时间同步',
  [CONNECT_AUTH]: '连接鉴权',
  [BIND_AUTH]: '绑定鉴权',
  [BIND_AUTH_DETAIL]: '绑定鉴权详情',
  [BIND_AUTH_SUCCESS]: '绑定鉴权成功',
  [UNBIND_AUTH]: '解绑鉴权',
  [CONNECT_RESULT_WRITE_SUCCESS]: '连接小程序端鉴权成功',
  [UNBIND_RESULT_AUTH_SUCCESS]: '解绑小程序端鉴权成功',
};


export const BLE_IOT_DATA_TYPE_BOOL = 'bool';
export const BLE_IOT_DATA_TYPE_INT = 'int';
export const BLE_IOT_DATA_TYPE_STRING = 'string';
export const BLE_IOT_DATA_TYPE_FLOAT = 'float';
export const BLE_IOT_DATA_TYPE_ENUM = 'enum';
export const BLE_IOT_DATA_TYPE_TIME = 'timestamp';
export const BLE_IOT_DATA_TYPE_STRUCT = 'struct';

export const TLV_TYPE_INDEX = {
  [BLE_IOT_DATA_TYPE_BOOL]: 0,
  [BLE_IOT_DATA_TYPE_INT]: 1,
  [BLE_IOT_DATA_TYPE_STRING]: 2,
  [BLE_IOT_DATA_TYPE_FLOAT]: 3,
  [BLE_IOT_DATA_TYPE_ENUM]: 4,
  [BLE_IOT_DATA_TYPE_TIME]: 5,
  [BLE_IOT_DATA_TYPE_STRUCT]: 6,
};

export const TLV_TYPE_LENGTH = {
  [BLE_IOT_DATA_TYPE_BOOL]: 1,
  [BLE_IOT_DATA_TYPE_INT]: 4,
  [BLE_IOT_DATA_TYPE_FLOAT]: 4,
  [BLE_IOT_DATA_TYPE_ENUM]: 2,
  [BLE_IOT_DATA_TYPE_TIME]: 4,
};

export const TEMPLATE_PROPERTY = 'properties';
export const TEMPLATE_EVENTS = 'events';
export const TEMPLATE_ACTIONS = 'actions';

export const OTA_UPDATE_REQUEST = 'OTA_UPDATE_REQUEST';
export const OTA_UPDATE_DATA = 'OTA_UPDATE_DATA';
export const OTA_UPDATE_DATA_END = 'OTA_UPDATE_DATA_END';

// 十六进制
export const LL_OTA_WRITE_PREFIX = {
  [OTA_UPDATE_REQUEST]: '00',
  [OTA_UPDATE_DATA]: '01',
  [OTA_UPDATE_DATA_END]: '02',
};

export const USER_NEED_LOGIN = 'USER_NEED_LOGIN';
export const WAIT_CONNECT_REPLY_TIMEOUT = 'WAIT_CONNECT_REPLY_TIMEOUT';
export const CONNECT_REPLY_INVALID = 'CONNECT_REPLY_INVALID';
export const WAIT_UNBIND_REPLY_TIMEOUT = 'WAIT_UNBIND_REPLY_TIMEOUT';
export const WAIT_CONTROL_DEVICE_REPLY_TIMEOUT = 'WAIT_CONTROL_DEVICE_REPLY_TIMEOUT';
export const WAIT_CONTROL_ACTION_REPLY_TIMEOUT = 'WAIT_CONTROL_ACTION_REPLY_TIMEOUT';
export const UNBIND_REPLY_INVALID = 'UNBIND_REPLY_INVALID';
export const CONTROL_REPLY_INVALID = 'CONTROL_REPLY_INVALID';
export const CONTROL_ACTION_ERROR = 'CONTROL_ACTION_ERROR';
export const CONNECT_DEVICE_ERROR = 'CONNECT_DEVICE_ERROR';
export const CANNOT_FIND_DEVICE = 'CANNOT_FIND_DEVICE';
export const DEVICE_NAME_IS_EMPTY = 'DEVICE_NAME_IS_EMPTY';
export const PSK_GET_ERROR = 'PSK_GET_ERROR';
export const CONNECT_SIGN_AUTH_ERROR = 'CONNECT_SIGN_AUTH_ERROR';
export const UNBIND_REPLY_ERROR = 'UNBIND_REPLY_ERROR';
export const CONTROL_REPLY_CODE_INVALID = 'CONTROL_REPLY_CODE_INVALID';
export const CONTROL_DEVICE_REPLY_ERROR = 'CONTROL_DEVICE_REPLY_ERROR';
export const REPORT_RESULT_ERROR = 'REPORT_RESULT_ERROR';
export const GET_STATUS_ERROR = 'GET_STATUS_ERROR';
export const EVENT_REPLY_ERROR = 'EVENT_REPLY_ERROR';
export const BLE_WRITE_ERROR = 'BLE_WRITE_ERROR';
export const WAIT_GET_DEVICE_INFO_TIMEOUT = 'WAIT_GET_DEVICE_INFO_TIMEOUT';
export const DEVICE_INFO_INVALID = 'DEVICE_INFO_INVALID';

// OTA升级部分
export const WAIT_GET_UPDATE_INFO_TIMEOUT = 'WAIT_GET_UPDATE_INFO_TIMEOUT';
export const WAIT_MODULE_UPDATE_TIMEOUT = 'WAIT_MODULE_UPDATE_TIMEOUT';

// blecombo相关
export const SET_WIFI_MODE_RESULT_INVALID = 'SET_WIFI_MODE_RESULT_INVALID';
export const SET_WIFI_MODE_RESULT_TIMEOUT = 'SET_WIFI_MODE_RESULT_TIMEOUT';
export const SET_WIFI_INFO_RESULT_INVALID = 'SET_WIFI_INFO_INVALID';
export const SET_WIFI_INFO_RESULT_TIMEOUT = 'SET_WIFI_INFO_TIMEOUT';
export const SET_WIFI_CONNECT_RESULT_INVALID = 'SET_WIFI_CONNECT_RESULT_INVALID';
export const SET_WIFI_CONNECT_RESULT_TIMEOUT = 'SET_WIFI_CONNECT_RESULT_TIMEOUT';
export const SET_WIFI_TOKEN_RESULT_INVALID = 'SET_WIFI_TOKEN_RESULT_INVALID';
export const SET_WIFI_TOKEN_RESULT_TIMEOUT = 'SET_WIFI_TOKEN_RESULT_TIMEOUT';
export const GET_DEV_LOG_INFO_INVALID = 'GET_DEV_LOG_INFO_INVALID';
export const GET_DEV_LOG_INFO_TIMEOUT = 'GET_DEV_LOG_INFO_TIMEOUT';

export const NOT_SPLIT = 'NOT_SPLIT';
export const SPLIT_FIRST = 'SPLIT_FIRST';
export const SPLIT_MIDDLE = 'SPLIT_MIDDLE';
export const SPLIT_LAST = 'SPLIT_LAST';

export const SPLIT_MAP = {
  0: NOT_SPLIT,
  1: SPLIT_FIRST,
  2: SPLIT_MIDDLE,
  3: SPLIT_LAST,
};

export const SPLIT_INDEX_MAP = {
  [NOT_SPLIT]: 0,
  [SPLIT_FIRST]: 1,
  [SPLIT_MIDDLE]: 2,
  [SPLIT_LAST]: 3,
};


// ota相关的参数
export const OTA_UPDATE_STEPS = {
  GET_OTA_UPDATE_INFO: 'GET_OTA_UPDATE_INFO',
  GET_OTA_UPDATE_INFO_SUCCESS: 'GET_OTA_UPDATE_INFO_SUCCESS',
  DOWNLOADING_OTA_FILE: 'DOWNLOADING_OTA_FILE',
  DOWNLOADING_OTA_FILE_DETAIL: 'DOWNLOADING_OTA_FILE_DETAIL',
  DOWNLOAD_OTA_FILE_SUCCESS: 'DOWNLOAD_OTA_FILE_SUCCESS',
  REQUEST_MODULE_UPDATE_START: 'REQUEST_MODULE_UPDATE',
  REQUEST_MODULE_UPDATE_SUCCESS: 'REQUEST_MODULE_UPDATE_SUCCESS',
  MODULE_UPDATE_CHECK_FILE_SUCCESS: 'MODULE_UPDATE_SUCCESS',
  SEND_UPDATE_DATA_START: 'SEND_UPDATE_DATA_START',
  SEND_UPDATE_DATA_DETAIL: 'SEND_UPDATE_DATA_DETAIL',
  SEND_UPDATE_DATA_SUCCESS: 'SEND_UPDATE_DATA_SUCCESS',
  WAITING_MODULE_UPDATE: 'WAITING_MODULE_UPDATE',
  MODULE_UPDATE_SUCCESS: 'MODULE_UPDATE_SUCCESS',
};


export const OTA_UPDATE_STEPS_MESSAGE = {
  [OTA_UPDATE_STEPS.GET_OTA_UPDATE_INFO]: '获取固件版本信息',
  [OTA_UPDATE_STEPS.GET_OTA_UPDATE_INFO_SUCCESS]: '获取固件版本信息成功',
  [OTA_UPDATE_STEPS.DOWNLOADING_OTA_FILE]: '正在下载OTA文件',
  [OTA_UPDATE_STEPS.DOWNLOADING_OTA_FILE_DETAIL]: '正在下载OTA文件详情',
  [OTA_UPDATE_STEPS.DOWNLOAD_OTA_FILE_SUCCESS]: '下载OTA文件成功',
  [OTA_UPDATE_STEPS.REQUEST_MODULE_UPDATE_START]: '开始检查设备端固件升级支持情况',
  [OTA_UPDATE_STEPS.REQUEST_MODULE_UPDATE_SUCCESS]: '检查设备端固件升级支持情况成功',
  [OTA_UPDATE_STEPS.SEND_UPDATE_DATA_START]: '开始发送固件升级文件',
  [OTA_UPDATE_STEPS.SEND_UPDATE_DATA_DETAIL]: '固件升级文件详情',
  [OTA_UPDATE_STEPS.SEND_UPDATE_DATA_SUCCESS]: '固件升级文件发送成功',
  [OTA_UPDATE_STEPS.WAITING_MODULE_UPDATE]: '开始烧录固件升级文件',
  [OTA_UPDATE_STEPS.MODULE_UPDATE_SUCCESS]: '设备端固件升级成功',
};

export const OTA_UPDATE_ERRORS = {
  GET_OTA_INFO_FAIL: '获取OTA升级信息失败',
  MODULE_VERSION_IS_UPDATED: '设备端固件已经是最新版',
  MODULE_DONNOT_SUPPORT: '设备端固件不支持',
  USER_CANCEL_OTA_UPDATE: '用户取消固件升级',
  MODULE_DONNOT_ALLOW: '设备端固件不允许，可能是当前状态不允许',
  MODULE_UPDATE_CHECK_FILE_FAIL: '升级文件校验失败',
  GET_FILE_CRC_ERROR: '获取文件和crc错误',
  [WAIT_GET_UPDATE_INFO_TIMEOUT]: '获取设备端分片包回包超时',
  [WAIT_MODULE_UPDATE_TIMEOUT]: '等待设备端升级超时',
  UPDATE_DATA_REPLAY_TIMEOUT: '发送固件升级文件超时',
  MODULE_UPDATE_FAIL: '设备端固件升级失败',
  MODULE_UPDATE_CONNECT_TIMEOUT: '设备端固件升级连接设备超时',
  BLE_CONNECTION_BREAK: '蓝牙连接断开',
};

export const BLE_COMBO_ERRORS = {
  [SET_WIFI_MODE_RESULT_INVALID]: '设置WiFi模式返回格式错误',
  [SET_WIFI_MODE_RESULT_TIMEOUT]: '设置WiFi模式返回超时，请稍后再试',
  [SET_WIFI_INFO_RESULT_INVALID]: 'WiFi信息传输返回格式错误',
  [SET_WIFI_INFO_RESULT_TIMEOUT]: 'WiFi信息传输返回超时，请稍后再试',
  [SET_WIFI_CONNECT_RESULT_INVALID]: 'WiFi连接失败',
  [SET_WIFI_CONNECT_RESULT_TIMEOUT]: '获取WiFi连接状态超时',
  [SET_WIFI_TOKEN_RESULT_INVALID]: '发送配网token结果非法',
  [SET_WIFI_TOKEN_RESULT_TIMEOUT]: '发送配网token结果超时，请稍后再试',
  [GET_DEV_LOG_INFO_INVALID]: '获取配网日志格式错误',
  [GET_DEV_LOG_INFO_TIMEOUT]: '获取配网日志超时，请稍后再试',
};


export const MODULE_UPDATE_REPLAY_CODE_MAP = {
  0: '设备电量不足',
  1: '版本号错误',
};


export const MODULE_UPDATE_DATA_REPLAY_CODE_MAP = {
  1: OTA_UPDATE_STEPS.MODULE_UPDATE_CHECK_FILE_SUCCESS,
  0: 'MODULE_UPDATE_CHECK_FILE_FAIL',
};

export const MODULE_UPDATE_REPLAY_DATA_CODE_MAP = {
  0: 'CRC错误',
  1: '文件读取失败',
  2: '文件错误',
};

export const WAIT_MODULE_UPDATE_CONNECT_TIMES = 5;
export const WAIT_MODULE_UPDATE_CONNECT_TIME_GAP = 2000;
export const UPDATE_WRITE_ERROR_TIMES_PER_CIRCLE = 5;

export const ERROR_MESSAGES = {
  [USER_NEED_LOGIN]: '用户未登录，不能连接蓝牙',
  [CONTROL_ACTION_ERROR]: '行为调用失败',
  [CONNECT_DEVICE_ERROR]: '连接设备失败',
  [CANNOT_FIND_DEVICE]: '无法找到设备',
  [USER_NEED_LOGIN]: '请重新登录',
  [WAIT_CONNECT_REPLY_TIMEOUT]: '等待连接回复超时',
  [CONNECT_REPLY_INVALID]: '等待连接回复非法',
  [GET_USER_CHECK_REJECT]: '用户端确认拒绝',
  [WAIT_USER_CHECK_TIMEOUT]: '等待用户确认超时',
  [GET_USER_CHECK_TIMEOUT_TIMEOUT]: '获取设备端用户确认超时时间超时，使用默认超时时间',
  [GET_USER_CHECK_TIMEOUT_ERROR]: '获取设备端用户确认超时时间失败，使用默认超时时间',
  [DEVICE_NAME_IS_EMPTY]: '设备名称非法',
  [PSK_GET_ERROR]: '获取local psk失败',
  [CONNECT_SIGN_AUTH_ERROR]: '获取连接认证失败',
  [WAIT_UNBIND_REPLY_TIMEOUT]: '获取解绑回复超时',
  [UNBIND_REPLY_INVALID]: '解绑回复非法',
  [UNBIND_REPLY_ERROR]: '解绑回复失败',
  [WAIT_CONTROL_DEVICE_REPLY_TIMEOUT]: '等待控制设备回复超时',
  [CONTROL_DEVICE_REPLY_ERROR]: '控制设备失败',
  [CONTROL_REPLY_INVALID]: '等待控制设备回复非法',
  [BIND_AUTH_FAIL]: '绑定鉴权失败',
  [UNBIND_RESULT_AUTH_FAIL]: '解绑小程序端鉴权失败',
  [CONNECT_RESULT_WRITE_FAIL]: '连接小程序端鉴权失败',
  [CONTROL_REPLY_CODE_INVALID]: '设备端控制回包code非0',
  [REPORT_RESULT_ERROR]: '上报设备最新状态失败',
  [GET_STATUS_ERROR]: '获取最新状态失败',
  [EVENT_REPLY_ERROR]: 'EVENT_REPLY_ERROR',
  [BLE_WRITE_ERROR]: '设备写入失败',
  [WAIT_GET_DEVICE_INFO_TIMEOUT]: '获取设备信息超时',
  [DEVICE_INFO_INVALID]: '设备版本和MTU信息非法',
  ID_TEMPLATE_IS_NOT_EXIT: '设备端传的id在物模型里面不存在',
  TYPE_IN_MODULE_IS_WRONG: '设备端的type和后台的不一致',
  ...OTA_UPDATE_ERRORS,
};
